[
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Sequence",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Union",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "List",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "Optional",
        "importPath": "typing",
        "description": "typing",
        "isExtraImport": true,
        "detail": "typing",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "op",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "context",
        "importPath": "alembic",
        "description": "alembic",
        "isExtraImport": true,
        "detail": "alembic",
        "documentation": {}
    },
    {
        "label": "sqlalchemy",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "engine_from_config",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "pool",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "UniqueConstraint",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "TIMESTAMP",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "MetaData",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "text",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "select",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "postgresql",
        "importPath": "sqlalchemy.dialects",
        "description": "sqlalchemy.dialects",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "fileConfig",
        "importPath": "logging.config",
        "description": "logging.config",
        "isExtraImport": true,
        "detail": "logging.config",
        "documentation": {}
    },
    {
        "label": "postgresql_connection_settings",
        "importPath": "flux_orm.config",
        "description": "flux_orm.config",
        "isExtraImport": true,
        "detail": "flux_orm.config",
        "documentation": {}
    },
    {
        "label": "postgresql_connection_settings",
        "importPath": "flux_orm.config",
        "description": "flux_orm.config",
        "isExtraImport": true,
        "detail": "flux_orm.config",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "flux_orm.custom_logger",
        "description": "flux_orm.custom_logger",
        "isExtraImport": true,
        "detail": "flux_orm.custom_logger",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "Model",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "create_tables",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "delete_tables",
        "importPath": "flux_orm.database",
        "description": "flux_orm.database",
        "isExtraImport": true,
        "detail": "flux_orm.database",
        "documentation": {}
    },
    {
        "label": "JSONB",
        "importPath": "sqlalchemy.dialects.postgresql",
        "description": "sqlalchemy.dialects.postgresql",
        "isExtraImport": true,
        "detail": "sqlalchemy.dialects.postgresql",
        "documentation": {}
    },
    {
        "label": "MutableDict",
        "importPath": "sqlalchemy.ext.mutable",
        "description": "sqlalchemy.ext.mutable",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.mutable",
        "documentation": {}
    },
    {
        "label": "MutableList",
        "importPath": "sqlalchemy.ext.mutable",
        "description": "sqlalchemy.ext.mutable",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.mutable",
        "documentation": {}
    },
    {
        "label": "relationship",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "DeclarativeBase",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "sessionmaker",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "joinedload",
        "importPath": "sqlalchemy.orm",
        "description": "sqlalchemy.orm",
        "isExtraImport": true,
        "detail": "sqlalchemy.orm",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "timezone",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "uuid6",
        "importPath": "uuid6",
        "description": "uuid6",
        "isExtraImport": true,
        "detail": "uuid6",
        "documentation": {}
    },
    {
        "label": "mapped_column",
        "importPath": "flux_orm.models",
        "description": "flux_orm.models",
        "isExtraImport": true,
        "detail": "flux_orm.models",
        "documentation": {}
    },
    {
        "label": "ForeignKey",
        "importPath": "flux_orm.models",
        "description": "flux_orm.models",
        "isExtraImport": true,
        "detail": "flux_orm.models",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "flux_orm.models",
        "description": "flux_orm.models",
        "isExtraImport": true,
        "detail": "flux_orm.models",
        "documentation": {}
    },
    {
        "label": "Mapped",
        "importPath": "flux_orm.models",
        "description": "flux_orm.models",
        "isExtraImport": true,
        "detail": "flux_orm.models",
        "documentation": {}
    },
    {
        "label": "utcnow_naive",
        "importPath": "flux_orm.models.utils",
        "description": "flux_orm.models.utils",
        "isExtraImport": true,
        "detail": "flux_orm.models.utils",
        "documentation": {}
    },
    {
        "label": "utcnow_naive",
        "importPath": "flux_orm.models.utils",
        "description": "flux_orm.models.utils",
        "isExtraImport": true,
        "detail": "flux_orm.models.utils",
        "documentation": {}
    },
    {
        "label": "pytest_asyncio",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest_asyncio",
        "description": "pytest_asyncio",
        "detail": "pytest_asyncio",
        "documentation": {}
    },
    {
        "label": "pytest",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pytest",
        "description": "pytest",
        "detail": "pytest",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "TeamMember",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Coach",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchStatus",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Substitution",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionCategory",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchAIStatement",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionInCategory",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchStatus",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Match",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchStatus",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "TeamMember",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "flux_orm.models.models",
        "description": "flux_orm.models.models",
        "isExtraImport": true,
        "detail": "flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "pathlib",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pathlib",
        "description": "pathlib",
        "detail": "pathlib",
        "documentation": {}
    },
    {
        "label": "pydantic",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydantic",
        "description": "pydantic",
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "BaseModel",
        "importPath": "pydantic",
        "description": "pydantic",
        "isExtraImport": true,
        "detail": "pydantic",
        "documentation": {}
    },
    {
        "label": "pydantic_settings",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pydantic_settings",
        "description": "pydantic_settings",
        "detail": "pydantic_settings",
        "documentation": {}
    },
    {
        "label": "sqlalchemy.engine.url",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sqlalchemy.engine.url",
        "description": "sqlalchemy.engine.url",
        "detail": "sqlalchemy.engine.url",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "sys",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "sys",
        "description": "sys",
        "detail": "sys",
        "documentation": {}
    },
    {
        "label": "logger",
        "importPath": "loguru",
        "description": "loguru",
        "isExtraImport": true,
        "detail": "loguru",
        "documentation": {}
    },
    {
        "label": "async_sessionmaker",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "create_async_engine",
        "importPath": "sqlalchemy.ext.asyncio",
        "description": "sqlalchemy.ext.asyncio",
        "isExtraImport": true,
        "detail": "sqlalchemy.ext.asyncio",
        "documentation": {}
    },
    {
        "label": "uuid",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uuid",
        "description": "uuid",
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "UUID",
        "importPath": "uuid",
        "description": "uuid",
        "isExtraImport": true,
        "detail": "uuid",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "APIRouter",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "HTTPException",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "Query",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "FastAPI",
        "importPath": "fastapi",
        "description": "fastapi",
        "isExtraImport": true,
        "detail": "fastapi",
        "documentation": {}
    },
    {
        "label": "CompetitionOut",
        "importPath": "schemas.cs.schemas",
        "description": "schemas.cs.schemas",
        "isExtraImport": true,
        "detail": "schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchOut",
        "importPath": "schemas.cs.schemas",
        "description": "schemas.cs.schemas",
        "isExtraImport": true,
        "detail": "schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "SportOut",
        "importPath": "schemas.cs.schemas",
        "description": "schemas.cs.schemas",
        "isExtraImport": true,
        "detail": "schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchOut",
        "importPath": "schemas.cs.schemas",
        "description": "schemas.cs.schemas",
        "isExtraImport": true,
        "detail": "schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "SportOut",
        "importPath": "schemas.cs.schemas",
        "description": "schemas.cs.schemas",
        "isExtraImport": true,
        "detail": "schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.main_page",
        "description": "api.main_page",
        "isExtraImport": true,
        "detail": "api.main_page",
        "documentation": {}
    },
    {
        "label": "router",
        "importPath": "api.match_page",
        "description": "api.match_page",
        "isExtraImport": true,
        "detail": "api.match_page",
        "documentation": {}
    },
    {
        "label": "Sport",
        "importPath": "flux_orm",
        "description": "flux_orm",
        "isExtraImport": true,
        "detail": "flux_orm",
        "documentation": {}
    },
    {
        "label": "asynccontextmanager",
        "importPath": "contextlib",
        "description": "contextlib",
        "isExtraImport": true,
        "detail": "contextlib",
        "documentation": {}
    },
    {
        "label": "uvicorn",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "uvicorn",
        "description": "uvicorn",
        "detail": "uvicorn",
        "documentation": {}
    },
    {
        "label": "all_routers",
        "importPath": "api.routers",
        "description": "api.routers",
        "isExtraImport": true,
        "detail": "api.routers",
        "documentation": {}
    },
    {
        "label": "add_cs_sport",
        "importPath": "init_scripts.fill_tables",
        "description": "init_scripts.fill_tables",
        "isExtraImport": true,
        "detail": "init_scripts.fill_tables",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "description": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.create_table('coach',\n    sa.Column('coach_id', sa.Uuid(), nullable=False),\n    sa.Column('name', sa.String(), nullable=False),\n    sa.Column('description', sa.String(), nullable=True),\n    sa.Column('image_url', sa.String(), nullable=True),\n    sa.Column('stats', postgresql.JSONB(astext_type=sa.Text()), nullable=True),\n    sa.Column('regalia', postgresql.JSONB(astext_type=sa.Text()), nullable=True),\n    sa.Column('created_at', sa.TIMESTAMP(), nullable=False),",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "description": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_table('team_in_match')\n    op.drop_table('substitution')\n    op.drop_table('filtered_match_in_news')\n    op.drop_table('ai_statement_in_match')\n    op.drop_table('team_in_competition')\n    op.drop_table('match')\n    op.drop_table('competition_in_category')\n    op.drop_table('raw_news')",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.versions.1732dcb7ab52_initial_commit",
        "documentation": {}
    },
    {
        "label": "upgrade",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "description": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "peekOfCode": "def upgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.add_column('match', sa.Column('match_url', sa.String(), nullable=True))\n    # ### end Alembic commands ###\ndef downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('match', 'match_url')\n    # ### end Alembic commands ###",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "documentation": {}
    },
    {
        "label": "downgrade",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "description": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "peekOfCode": "def downgrade() -> None:\n    # ### commands auto generated by Alembic - please adjust! ###\n    op.drop_column('match', 'match_url')\n    # ### end Alembic commands ###",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.versions.7c9330bb5839_updated_match",
        "documentation": {}
    },
    {
        "label": "run_migrations_offline",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.env",
        "description": ".venv.src.flux-orm.flux_orm.migrations.env",
        "peekOfCode": "def run_migrations_offline() -> None:\n    \"\"\"\n    Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.\n    \"\"\"",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.env",
        "documentation": {}
    },
    {
        "label": "run_migrations_online",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.env",
        "description": ".venv.src.flux-orm.flux_orm.migrations.env",
        "peekOfCode": "def run_migrations_online() -> None:\n    \"\"\"\n    Run migrations in 'online' mode.\n    In this scenario we need to create an Engine\n    and associate a connection with the context.\n    \"\"\"\n    connectable = engine_from_config(\n        config.get_section(config.config_ini_section, {}),\n        connect_args={\"password\": os.getenv(\"DB_PASS\")},\n        prefix=\"sqlalchemy.\",",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.env",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.env",
        "description": ".venv.src.flux-orm.flux_orm.migrations.env",
        "peekOfCode": "config = context.config\nif config.config_file_name is not None:\n    fileConfig(config.config_file_name)\nconfig.set_main_option(\n    \"sqlalchemy.url\",\n    str(postgresql_connection_settings.migration_async_url) + \"?async_fallback=True\",\n)\nfrom flux_orm.database import Model  # noqa: E402\nlogger.info(f\"Tables found in metadata: {Model.metadata.tables.keys()}\")\ntarget_metadata = Model.metadata",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.env",
        "documentation": {}
    },
    {
        "label": "target_metadata",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.migrations.env",
        "description": ".venv.src.flux-orm.flux_orm.migrations.env",
        "peekOfCode": "target_metadata = Model.metadata\ndef run_migrations_offline() -> None:\n    \"\"\"\n    Run migrations in 'offline' mode.\n    This configures the context with just a URL\n    and not an Engine, though an Engine is acceptable\n    here as well.  By skipping the Engine creation\n    we don't even need a DBAPI to be available.\n    Calls to context.execute() here emit the given string to the\n    script output.",
        "detail": ".venv.src.flux-orm.flux_orm.migrations.env",
        "documentation": {}
    },
    {
        "label": "Sport",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Sport(Model):\n    __tablename__ = \"sport\"\n    sport_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    name: Mapped[str] = mapped_column(unique=True)\n    description: Mapped[str | None]\n    image_url: Mapped[str | None]\n    competitions: Mapped[list[\"Competition\"]] = relationship(\n        back_populates=\"sport\",\n        uselist=True,\n        cascade=\"save-update, expunge, merge, delete\",",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Competition",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Competition(Model):\n    __tablename__ = \"competition\"\n    competition_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    sport_id: Mapped[UUID] = mapped_column(ForeignKey(\"sport.sport_id\"))\n    name: Mapped[str] = mapped_column(unique=True)\n    prize_pool: Mapped[str | None]\n    location: Mapped[str | None]\n    start_date: Mapped[datetime | None]\n    description: Mapped[str | None]\n    image_url: Mapped[str | None]",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionInCategory",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class CompetitionInCategory(Model):\n    __tablename__ = \"competition_in_category\"\n    competition_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"competition.competition_id\"), primary_key=True\n    )\n    category_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"competition_category.category_id\", ondelete=\"CASCADE\"),\n        primary_key=True,\n    )\nclass CompetitionCategory(Model):",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "CompetitionCategory",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class CompetitionCategory(Model):\n    __tablename__ = \"competition_category\"\n    category_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    name: Mapped[str]\n    description: Mapped[str | None]\n    image_url: Mapped[str | None]\n    competitions: Mapped[list[\"Competition\"] | None] = relationship(\n        back_populates=\"categories\",\n        uselist=True,\n        secondary=\"competition_in_category\",",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "TeamInCompetition",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class TeamInCompetition(Model):\n    __tablename__ = \"team_in_competition\"\n    team_id: Mapped[UUID] = mapped_column(ForeignKey(\"team.team_id\"), primary_key=True)\n    competition_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"competition.competition_id\"),\n        primary_key=True,\n    )\n    place: Mapped[int | None]\n    stats = mapped_column(JSONB)\nclass Team(Model):",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Team",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Team(Model):\n    __tablename__ = \"team\"\n    team_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    name: Mapped[str] = mapped_column(unique=True)\n    pretty_name: Mapped[str | None]\n    team_url: Mapped[str | None]\n    matches: Mapped[list[\"Match\"] | None] = relationship(\n        back_populates=\"match_teams\",\n        uselist=True,\n        secondary=\"team_in_match\",",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "PlayerInTeam",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class PlayerInTeam(Model):\n    __tablename__ = \"player_in_team\"\n    player_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"team_member.player_id\"), primary_key=True\n    )\n    team_id: Mapped[UUID] = mapped_column(ForeignKey(\"team.team_id\"), primary_key=True)\n# class PlayerInMatchStats(Model):\n#     __tablename__ = \"player_in_match_stats\"\n#     player_id: Mapped[UUID] = mapped_column(ForeignKey('team_member.player_id'), primary_key=True)\n#     match_id: Mapped[UUID] = mapped_column(ForeignKey('match.match_id'), primary_key=True)",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "TeamMember",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class TeamMember(Model):\n    __tablename__ = \"team_member\"\n    __table_args__ = (\n        UniqueConstraint(\n            \"nickname\",\n            \"name\",\n            \"image_url\",\n            name=\"team_member_nickname_name_image_unique\",\n        ),\n    )",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "TeamInMatch",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class TeamInMatch(Model):\n    __tablename__ = \"team_in_match\"\n    team_id: Mapped[UUID] = mapped_column(ForeignKey(\"team.team_id\"), primary_key=True)\n    match_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match.match_id\"), primary_key=True\n    )\n    place: Mapped[int | None]\n    stats = mapped_column(JSONB, nullable=True)\nclass MatchStatus(Model):\n    __tablename__ = \"match_status\"",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchStatus",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class MatchStatus(Model):\n    __tablename__ = \"match_status\"\n    status_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    match: Mapped[\"Match\"] = relationship(\n        back_populates=\"match_status\",\n        uselist=False,\n        cascade=\"save-update, expunge, merge\",\n    )\n    name: Mapped[str]\n    status: Mapped[dict[str, str] | None] = mapped_column(",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Match",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Match(Model):\n    __tablename__ = \"match\"\n    __table_args__ = (\n        UniqueConstraint(\n            \"match_name\",\n            \"planned_start_datetime\",\n            name=\"match_name_planned_start_datetime_unique\",\n        ),\n    )\n    match_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "AIStatementInMatch",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class AIStatementInMatch(Model):\n    __tablename__ = \"ai_statement_in_match\"\n    statement_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match_ai_statement.statement_id\"),\n        primary_key=True,\n    )\n    match_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match.match_id\"), primary_key=True\n    )\nclass MatchAIStatement(Model):",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "MatchAIStatement",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class MatchAIStatement(Model):\n    __tablename__ = \"match_ai_statement\"\n    statement_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    matches: Mapped[list[\"Match\"] | None] = relationship(\n        back_populates=\"ai_statements\",\n        uselist=True,\n        secondary=\"ai_statement_in_match\",\n        cascade=\"save-update, expunge, merge\",\n    )\n    created_at: Mapped[datetime] = mapped_column(",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Coach",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Coach(Model):\n    __tablename__ = \"coach\"\n    coach_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    name: Mapped[str]\n    description: Mapped[str | None]\n    image_url: Mapped[str | None]\n    teams: Mapped[list[\"Team\"] | None] = relationship(\n        back_populates=\"coaches\",\n        uselist=True,\n        secondary=\"coach_in_team\",",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "CoachInTeam",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class CoachInTeam(Model):\n    __tablename__ = \"coach_in_team\"\n    coach_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"coach.coach_id\"), primary_key=True\n    )\n    team_id: Mapped[UUID] = mapped_column(ForeignKey(\"team.team_id\"), primary_key=True)\nclass Substitution(Model):\n    __tablename__ = \"substitution\"\n    match_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match.match_id\"), primary_key=True",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "Substitution",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class Substitution(Model):\n    __tablename__ = \"substitution\"\n    match_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match.match_id\"), primary_key=True\n    )\n    match: Mapped[\"Match\"] = relationship(\n        back_populates=\"substitutions\",\n        uselist=False,\n        cascade=\"save-update, expunge, merge\",\n    )",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "RawNews",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class RawNews(Model):\n    __tablename__ = \"raw_news\"\n    raw_news_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    sport_id: Mapped[UUID] = mapped_column(ForeignKey(\"sport.sport_id\"))\n    header: Mapped[str | None]\n    text: Mapped[list[str]] = mapped_column(MutableList.as_mutable(JSONB()))\n    url: Mapped[str]\n    news_creation_time: Mapped[datetime | None] = mapped_column(\n        TIMESTAMP(timezone=False)\n    )",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "FormattedNews",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class FormattedNews(Model):\n    __tablename__ = \"formatted_news\"\n    formatted_news_id: Mapped[UUID] = mapped_column(primary_key=True, default=uuid6)\n    sport_id: Mapped[UUID] = mapped_column(ForeignKey(\"sport.sport_id\"))\n    header: Mapped[str | None]\n    text: Mapped[list[str]] = mapped_column(MutableList.as_mutable(JSONB()))\n    url: Mapped[str]\n    news_creation_time: Mapped[datetime | None] = mapped_column(\n        TIMESTAMP(timezone=False)\n    )",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "FormattedMatchedNews",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class FormattedMatchedNews(Model):\n    __tablename__ = \"formatted_matched_news\"\n    formatted_matched_news_id: Mapped[UUID] = mapped_column(\n        primary_key=True, default=uuid6\n    )\n    header: Mapped[str | None]\n    text: Mapped[list[str]] = mapped_column(MutableList.as_mutable(JSONB()))\n    url: Mapped[str]\n    news_creation_time: Mapped[datetime | None] = mapped_column(\n        TIMESTAMP(timezone=False)",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "FilteredMatchInNews",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.models",
        "description": ".venv.src.flux-orm.flux_orm.models.models",
        "peekOfCode": "class FilteredMatchInNews(Model):\n    __tablename__ = \"filtered_match_in_news\"\n    match_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"match.match_id\"), primary_key=True\n    )\n    news_id: Mapped[UUID] = mapped_column(\n        ForeignKey(\"formatted_news.formatted_news_id\"), primary_key=True\n    )",
        "detail": ".venv.src.flux-orm.flux_orm.models.models",
        "documentation": {}
    },
    {
        "label": "utcnow_naive",
        "kind": 2,
        "importPath": ".venv.src.flux-orm.flux_orm.models.utils",
        "description": ".venv.src.flux-orm.flux_orm.models.utils",
        "peekOfCode": "def utcnow_naive():\n    return datetime.now(timezone.utc).replace(tzinfo=None)",
        "detail": ".venv.src.flux-orm.flux_orm.models.utils",
        "documentation": {}
    },
    {
        "label": "UsedUrl",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.models.utils_models",
        "description": ".venv.src.flux-orm.flux_orm.models.utils_models",
        "peekOfCode": "class UsedUrl(Model):\n    __tablename__ = \"used_url\"\n    url: Mapped[str] = mapped_column(primary_key=True)\n    used_at: Mapped[datetime] = mapped_column(TIMESTAMP(timezone=False), default=utcnow_naive())",
        "detail": ".venv.src.flux-orm.flux_orm.models.utils_models",
        "documentation": {}
    },
    {
        "label": "PostgreSQLConnectionSettings",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.config",
        "description": ".venv.src.flux-orm.flux_orm.config",
        "peekOfCode": "class PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr\n    DB_PASS: pydantic.SecretStr\n    IS_ECHO: bool = False\n    @property",
        "detail": ".venv.src.flux-orm.flux_orm.config",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.config",
        "description": ".venv.src.flux-orm.flux_orm.config",
        "peekOfCode": "ROOT_DIR = pathlib.Path(__file__).resolve().parent.parent\nDOTENV_PATH = ROOT_DIR / \".env\"\nload_dotenv(dotenv_path=DOTENV_PATH, override=True)\nclass PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr",
        "detail": ".venv.src.flux-orm.flux_orm.config",
        "documentation": {}
    },
    {
        "label": "DOTENV_PATH",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.config",
        "description": ".venv.src.flux-orm.flux_orm.config",
        "peekOfCode": "DOTENV_PATH = ROOT_DIR / \".env\"\nload_dotenv(dotenv_path=DOTENV_PATH, override=True)\nclass PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr\n    DB_PASS: pydantic.SecretStr",
        "detail": ".venv.src.flux-orm.flux_orm.config",
        "documentation": {}
    },
    {
        "label": "postgresql_connection_settings",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.config",
        "description": ".venv.src.flux-orm.flux_orm.config",
        "peekOfCode": "postgresql_connection_settings = PostgreSQLConnectionSettings()",
        "detail": ".venv.src.flux-orm.flux_orm.config",
        "documentation": {}
    },
    {
        "label": "config",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.custom_logger",
        "description": ".venv.src.flux-orm.flux_orm.custom_logger",
        "peekOfCode": "config = {\n    \"handlers\": [\n        {\n            \"sink\": sys.stdout,\n            \"format\": \"{time} - {message}\",\n            \"serialize\": True,\n            \"level\": \"DEBUG\",\n        },\n    ],\n}",
        "detail": ".venv.src.flux-orm.flux_orm.custom_logger",
        "documentation": {}
    },
    {
        "label": "Model",
        "kind": 6,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "class Model(DeclarativeBase):\n    pass\nMetadata = MetaData()\nasync def create_tables():\n    async with async_engine.begin() as conn:\n        print(\"Tables found in metadata:\", Model.metadata.tables.keys())\n        await conn.run_sync(Model.metadata.create_all)\nasync def force_delete_all():\n    async with async_engine.begin() as conn:\n        await conn.execute(text(\"DROP SCHEMA public CASCADE;\"))",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "sync_engine",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "sync_engine = create_engine(postgresql_connection_settings.sync_url)\nnew_sync_session = sessionmaker(sync_engine, expire_on_commit=True)\nasync_engine = create_async_engine(\n    postgresql_connection_settings.async_url,\n    pool_size=20,\n    max_overflow=30,\n    pool_timeout=60,\n)\nnew_session = async_sessionmaker(async_engine, expire_on_commit=True)\nclass Model(DeclarativeBase):",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_sync_session",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "new_sync_session = sessionmaker(sync_engine, expire_on_commit=True)\nasync_engine = create_async_engine(\n    postgresql_connection_settings.async_url,\n    pool_size=20,\n    max_overflow=30,\n    pool_timeout=60,\n)\nnew_session = async_sessionmaker(async_engine, expire_on_commit=True)\nclass Model(DeclarativeBase):\n    pass",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "async_engine",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "async_engine = create_async_engine(\n    postgresql_connection_settings.async_url,\n    pool_size=20,\n    max_overflow=30,\n    pool_timeout=60,\n)\nnew_session = async_sessionmaker(async_engine, expire_on_commit=True)\nclass Model(DeclarativeBase):\n    pass\nMetadata = MetaData()",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "new_session",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "new_session = async_sessionmaker(async_engine, expire_on_commit=True)\nclass Model(DeclarativeBase):\n    pass\nMetadata = MetaData()\nasync def create_tables():\n    async with async_engine.begin() as conn:\n        print(\"Tables found in metadata:\", Model.metadata.tables.keys())\n        await conn.run_sync(Model.metadata.create_all)\nasync def force_delete_all():\n    async with async_engine.begin() as conn:",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "Metadata",
        "kind": 5,
        "importPath": ".venv.src.flux-orm.flux_orm.database",
        "description": ".venv.src.flux-orm.flux_orm.database",
        "peekOfCode": "Metadata = MetaData()\nasync def create_tables():\n    async with async_engine.begin() as conn:\n        print(\"Tables found in metadata:\", Model.metadata.tables.keys())\n        await conn.run_sync(Model.metadata.create_all)\nasync def force_delete_all():\n    async with async_engine.begin() as conn:\n        await conn.execute(text(\"DROP SCHEMA public CASCADE;\"))\n        await conn.execute(text(\"CREATE SCHEMA public;\"))\nasync def delete_tables():",
        "detail": ".venv.src.flux-orm.flux_orm.database",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "flux_backend.api.main_page",
        "description": "flux_backend.api.main_page",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/main_page\",\n    tags=[\"main_page\"],\n)\n@router.get(\"/sports\", response_model=List[SportOut])\nasync def get_all_sports():\n    \"\"\"\n    Returns a list of all sports from the database.\n    \"\"\"\n    async with new_session() as session:",
        "detail": "flux_backend.api.main_page",
        "documentation": {}
    },
    {
        "label": "router",
        "kind": 5,
        "importPath": "flux_backend.api.match_page",
        "description": "flux_backend.api.match_page",
        "peekOfCode": "router = APIRouter(\n    prefix=\"/match_page\",\n    tags=[\"match_page\"]\n)\n@router.get(\"/matches/{match_id}\")\nasync def get_match_details(match_id: UUID):\n    async with new_session() as session:\n        stmt = (\n            select(Match, MatchStatus.name.label(\"status_name\"))\n            .outerjoin(MatchStatus, Match.status_id == MatchStatus.status_id)",
        "detail": "flux_backend.api.match_page",
        "documentation": {}
    },
    {
        "label": "all_routers",
        "kind": 5,
        "importPath": "flux_backend.api.routers",
        "description": "flux_backend.api.routers",
        "peekOfCode": "all_routers = [\n    main_page_router,\n    match_page_router,\n               ]",
        "detail": "flux_backend.api.routers",
        "documentation": {}
    },
    {
        "label": "CompetitionBase",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class CompetitionBase(BaseModel):\n    \"\"\"Base schema for competition data.\"\"\"\n    name: str\n    prize_pool: Optional[str] = None\n    location: Optional[str] = None\n    start_date: Optional[datetime] = None\n    description: Optional[str] = None\n    image_url: Optional[str] = None\nclass CompetitionOut(CompetitionBase):\n    \"\"\"Schema for returning competition data through external endpoints.\"\"\"",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "CompetitionOut",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class CompetitionOut(CompetitionBase):\n    \"\"\"Schema for returning competition data through external endpoints.\"\"\"\n    competition_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass MatchStatusBase(BaseModel):\n    \"\"\"Base schema for match status data.\"\"\"\n    name: str",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchStatusBase",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class MatchStatusBase(BaseModel):\n    \"\"\"Base schema for match status data.\"\"\"\n    name: str\n    image_url: Optional[str] = None\nclass MatchStatusOut(MatchStatusBase):\n    \"\"\"Schema for returning match status data through external endpoints.\"\"\"\n    status_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchStatusOut",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class MatchStatusOut(MatchStatusBase):\n    \"\"\"Schema for returning match status data through external endpoints.\"\"\"\n    status_id: UUID\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass MatchBase(BaseModel):\n    \"\"\"Base schema for match data.\"\"\"\n    match_name: str",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchBase",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class MatchBase(BaseModel):\n    \"\"\"Base schema for match data.\"\"\"\n    match_name: str\n    pretty_match_name: Optional[str] = None\n    match_url: Optional[str] = None\n    tournament_url: Optional[str] = None\n    external_id: str\n    planned_start_datetime: Optional[datetime] = None\n    end_datetime: Optional[datetime] = None\nclass MatchOut(MatchBase):",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "MatchOut",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class MatchOut(MatchBase):\n    \"\"\"Schema for returning match data through external endpoints.\"\"\"\n    match_id: UUID\n    status_id: Optional[UUID] = None\n    status_name: Optional[str] = None\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True\nclass SportOut(BaseModel):",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "SportOut",
        "kind": 6,
        "importPath": "flux_backend.schemas.cs.schemas",
        "description": "flux_backend.schemas.cs.schemas",
        "peekOfCode": "class SportOut(BaseModel):\n    \"\"\"Schema for returning sport data through external endpoints.\"\"\"\n    sport_id: UUID\n    name: str\n    description: Optional[str] = None\n    image_url: Optional[str] = None\n    created_at: datetime\n    updated_at: datetime\n    class Config:\n        from_attributes = True",
        "detail": "flux_backend.schemas.cs.schemas",
        "documentation": {}
    },
    {
        "label": "PostgreSQLConnectionSettings",
        "kind": 6,
        "importPath": "flux_backend.config",
        "description": "flux_backend.config",
        "peekOfCode": "class PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr\n    DB_PASS: pydantic.SecretStr\n    IS_ECHO: bool = False\n    @property",
        "detail": "flux_backend.config",
        "documentation": {}
    },
    {
        "label": "ROOT_DIR",
        "kind": 5,
        "importPath": "flux_backend.config",
        "description": "flux_backend.config",
        "peekOfCode": "ROOT_DIR = pathlib.Path(__file__).resolve().parent.parent\nDOTENV_PATH = ROOT_DIR / \".env\"\nload_dotenv(dotenv_path=DOTENV_PATH, override=True)\nclass PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr",
        "detail": "flux_backend.config",
        "documentation": {}
    },
    {
        "label": "DOTENV_PATH",
        "kind": 5,
        "importPath": "flux_backend.config",
        "description": "flux_backend.config",
        "peekOfCode": "DOTENV_PATH = ROOT_DIR / \".env\"\nload_dotenv(dotenv_path=DOTENV_PATH, override=True)\nclass PostgreSQLConnectionSettings(pydantic_settings.BaseSettings):\n    \"\"\"PostgreSQL connection settings.\"\"\"\n    DB_NAME: pydantic.SecretStr\n    DB_HOST: pydantic.SecretStr\n    DB_MIGRATION_HOST: pydantic.SecretStr\n    DB_PORT: pydantic.SecretStr\n    DB_USER: pydantic.SecretStr\n    DB_PASS: pydantic.SecretStr",
        "detail": "flux_backend.config",
        "documentation": {}
    },
    {
        "label": "postgresql_connection_settings",
        "kind": 5,
        "importPath": "flux_backend.config",
        "description": "flux_backend.config",
        "peekOfCode": "postgresql_connection_settings = PostgreSQLConnectionSettings()",
        "detail": "flux_backend.config",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "flux_backend.main",
        "description": "flux_backend.main",
        "peekOfCode": "app = FastAPI(lifespan=lifespan)\nfor router in all_routers:\n    app.include_router(router)\nif __name__ == \"__main__\":\n    uvicorn.run(\n        \"main:app\",\n        host=\"0.0.0.0\",\n        port=8000,\n        reload=True,\n        workers=1",
        "detail": "flux_backend.main",
        "documentation": {}
    }
]